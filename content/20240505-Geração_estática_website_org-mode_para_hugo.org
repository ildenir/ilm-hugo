---
title: "Geração estática website org-mode para hugo"
author: "Ildenir Barbosa"
date: 2024-05-05
draft: true
tags: [hugo,emacs,website,draft]
---

* Overview

Adaptação do workflow descrito anteriormente para exportar arquivos
tratados para framework hugo. Publicacao org to org com tratamento
para formato do hugo. Avalie documento com =C-c C-v C-b= para
configurações terem efeito

* Variaveis utilitarias
Essas variaveis definem a localizacao dos diretorios do projeto.

#+name: variaveis-utilitarias
#+begin_src emacs-lisp

  (defgroup ilm-website nil
    "Geracao do site estatico."
    :tag "ilm-website")

  (defcustom website-project-dir
    (expand-file-name
     (file-name-as-directory "~/Projetos/ildenir.github.com"))
    "Diretorio do projeto do website."
    :type 'directory
    :group 'ilm-website)

  (defcustom website-hugo-dir
    (expand-file-name
     (file-name-as-directory "~/Projetos/ilm-hugo"))
    "Diretorio de publicacao do site."
    :type 'directory
    :group 'ilm-website)

  (defsubst publish-content-dir ()
    "Diretorio onde sera publicado o website."
    (expand-file-name "content" website-hugo-dir))

  (defsubst publish-images-dir ()
    "Diretorio onde sera publicado as imagens do website."
    (expand-file-name "images"
                      (concat (file-name-as-directory website-hugo-dir)
                              "static")))

  (defsubst src-dir ()
    "Diretorio dos arquivos fonte org, imagens, css e ..."
    website-project-dir)

  (defsubst src-articles-dir ()
    "Diretorio fonte dos artigos."
    (concat (file-name-as-directory (src-dir))
            (file-name-as-directory "articles")))


  (defsubst src-images-dir ()
    "Diretorio fonte dos artigos."
    (concat (file-name-as-directory (src-dir))
            (file-name-as-directory "images")))
#+end_src

* Função de publicacao

#+name: publish-fun
#+begin_src emacs-lisp
  (defun ilm-convert-tags (keywords)
    "Converte KEYWORDS para format ['key1', 'key2']."
  (let ((keywords-seq (read keywords)))
    (concat "[" (string-join (mapcar #'prin1-to-string keywords-seq) ",") "]")))

  (defun ilm-website-to-hugo  (plist filename pub-dir)
    (let* ((fname (file-name-base filename))
           (xfilename (expand-file-name (concat fname ".org") pub-dir))
           (metadatas (website-extract-article-data filename))
           title
           date
           author
           draft
           lang
           keywords)
      (with-temp-buffer
        (org-mode)
        (insert-file-contents filename)
        (setq title (plist-get metadatas 'title))
        (setq date (let ((parsed-time (parse-time-tokenize (plist-get metadatas 'date))))
                     (format "%d-%.2d-%.2d" (cl-third parsed-time)
                             (cl-second parsed-time)
                             (cl-first parsed-time))))
        (setq author (plist-get metadatas 'author))
        (setq keywords (plist-get metadatas 'keywords))
        (message (prin1-to-string keywords))
        (setq draft (if (and keywords  (string-match "\\.*draft\\.*" keywords))
                        "true" "false"))
        (setq lang (plist-get metadatas 'language))
        (org-org-export-as-org))
      (with-temp-file xfilename
        ;;	  (fundamental-mode)
        (erase-buffer)
        (insert-buffer (get-buffer "*Org ORG Export*"))
        (goto-char 0)
        (mark-paragraph)
        (delete-region (region-beginning) (region-end))
        (insert (format "---\ntitle: \"%s\"\nauthor: \"%s\"\ndate: %s\ndraft: %s\ntags: %s\n---\n" title author date draft (ilm-convert-tags keywords)))
        (message (ilm-convert-tags keywords))
        (org-mode))))
#+end_src


* Componentes do projeto

#+name: componentes-projeto
#+begin_src emacs-lisp
  (require 'ox-publish)
  (setq org-publish-project-alist
        `(
          ("org-notes-to-hugo"
           :base-directory ,(src-articles-dir)
           :base-extension "org"
           :publishing-directory ,(publish-content-dir)
           :recursive t
           :publishing-function ilm-website-to-hugo)
          ("org-static-hugo"
           :base-directory ,(src-images-dir)
           :base-extension "png\\|jpg\\|gif\\|svg"
           :publishing-directory ,(publish-images-dir)
           :recursive t
           :publishing-function org-publish-attachment
           )
          ("org-hugo" :components ("org-notes-to-hugo" "org-static-hugo"))))
#+end_src

* Conteudo dinamico

#+name: conteudo-dinamico
#+begin_src emacs-lisp
  (require 'org-element)
  (require 'cl-lib)

  (defun website--extrack-kv (ast)
    "Rotina interna para extrair (key value) da AST."
    (org-element-map ast 'keyword
      (lambda(key) (list
                    (org-element-property :key key)
                    (org-element-property :value key)) )))

  (defun website--extract-link (ast)
    "Rotina interna para extrair link para image da AST."
    (org-element-map ast 'link
      (lambda(lk) (when (string= (org-element-property :type lk) "fuzzy")
                    lk))))

  (defun website-filter-kv (kws filterregexp)
    "Filtra lista KWS com key match padrao FILTERREGEXP."
    (cl-remove-if-not (lambda (el) (string-match filterregexp (car el))) kws))

  (defun website-extract-article-data (filename)
    "Extrai dados do artigo com nome FILENAME.
  Retorna plist keys title image description date"
    (with-temp-buffer
      (insert-file-contents filename)
      (org-mode)
      (let* ((filterregex "\\(TITLE\\|DATE\\|DESCRIPTION\\|EMAIL\\|KEYWORDS\\|AUTHOR\\|LANGUAGE\\)")
             (ast (org-element-parse-buffer))
             (kv (website--extrack-kv ast))
             (link (website--extract-link ast))
             (kv-filtered (website-filter-kv kv filterregex))
             kv-plist)
        (setq kv-plist
              (plist-put kv-plist
                         'image (org-element-interpret-data (car link))))
        (dolist (k kv-filtered kv-plist)
          (setq kv-plist
                (plist-put kv-plist
                           (intern (downcase (car k))) (car (cdr k))))))))

  (defun website-generate-article ()
    "Gera lista com dados de artigos do projeto.
  A lista retornada possui o formato
  '(filename (title desc link-img pub-date)) onde link-img pode ser nil caso nao
  exista.  Description vai ser extraida de #+DESCRIPTION:"
    (let ((files (directory-files-recursively (src-dir) "\.org$")))
      (mapcar (lambda (fn) (list fn (website-extract-article-data fn)))
              files)))
#+end_src

* Suporte ao fluxo de trabalho
O fluxo de trabalho consiste em criar/editar os arquivos =org=,
=css=, =js= e etc com conteudo que pertencera ao site. Ao terminar
todas as edicoes, basta gerar o site com o comando
~org-publish~ para publicar um projeto especifio ou
~org-publish-all~ para publicar todos os projetos. Essa opcoes
tambem estao acessiveis pela combinacao de teclas =C-c C-e P x= ou
=C-c C-e P a=, respectivamente.

** Producao de conteudo
A estrutura basica de um artigo pode ser composto rapidamente com o
comando ~website-new-article~. O comando pergunta por informacoes
como o titulo, descricao, palavra-chave e ao final do processo gera
o artigo na estrutura de diretorios do projeto.

#+name: content-generator
#+begin_src emacs-lisp

  (defun website--extract-kw (kw)
    "Auxiliar cria funcao que extrai lista de KW de todos os artigos."
    (lambda (data)
      (let ((pl (car (cdr data))) )
        (plist-get pl kw))))


  (defun website--list-all (keyword)
    "Extrai lista de keyword de todos os arquivos"
    (let ((articles (website-generate-article)))
      (remove nil (delete-dups (mapcar (website--extract-kw keyword) articles)))))

  (defun website--keyword-list ()
    "Lista de todas opcoes KEYWORD dos artigos."
    (let ((articles-kw (website--list-all 'keywords))
          (split-string-default-separators "[ \f\t\n\r\v,]+")
          (kw-list (list)))
      (dolist (l articles-kw kw-list)
        (setq kw-list (append kw-list (split-string l))))
      (remove "nil" (delete-dups kw-list))))

  (defun website-new-article ()
    "Entrevista usuario e insera conteudo ao projeto"
    (interactive)
    (let* ((title (read-string "Title: " ))
           (description (read-string "Descricao: "))
           (author (completing-read "Autor: " (website--list-all 'author)))
           (date (format-time-string "%d/%m/%Y"))
           (email (completing-read "Email: " (website--list-all 'email)))
           (keywords (completing-read-multiple "Palavras-chave: "
                                               (website--keyword-list)))
           (filename (string-join
                      (list (concat (file-name-as-directory (src-dir))
                                    (file-name-as-directory "articles"))
                            (format-time-string "%Y%m%d") "-"
                            (string-join (split-string title) "_") ".org"))))
      (with-current-buffer (get-buffer-create filename)
        (insert (format "#+TITLE: %s\n" title))
        (insert (format "#+DATE: %s\n" date))
        (insert (format "#+AUTHOR: %s\n" author))
        (insert (format "#+EMAIL: %s\n" email))
        (insert (format "#+DESCRIPTION: %s\n" description))
        (insert (format "#+KEYWORDS: %s\n" keywords))
        (insert "#+LANGUAGE: pt_BR\n")
        (insert "#+OPTIONS: num:nil\n")
        (write-file filename))))
#+end_src

* Exporta pacote website-publish
Agora o script serah finalizado com a exportacao do pacote para emacs.

#+name: exporta-modulo
#+begin_src emacs-lisp
  (provide 'website-publish)
  ;;; website-publish.el ends here
#+end_src

* Instruções para construir site com hugo

Ao baixar site do repositorio, será necessário reconstruir os submodulos
do git.

#+begin_src bash
  git submodule update --init --recursive
#+end_src

Para levantar um servidor de teste com páginas draft

#+begin_src bash
  hugo server --buildDrafts
#+end_src

ou apenas

#+begin_src bash
  hugo server
#+end_src



* Codigos

#+name: website-publish
#+begin_src emacs-lisp
  ;;; website-publish.el --- Configuracao publicar site com org-mode -*- lexical-binding:t -*-

  ;; Copyright (C) 2024 Ildenir Barbosa

  ;; Author: I. C. Barbosa <ildenir+github@googlemail.com>
  ;; Version: 0.0
  ;; Keywords: website
  ;; URL: http://github.com/ildenir/ildenir.github.com

  ;;; Commentary:

  ;; Este pacote configura/customiza o exportador do org-mode para gerar
  ;; o website.

  ;;; Code:


  (defgroup ilm-website nil
    "Geracao do site estatico."
    :tag "ilm-website")

  (defcustom website-project-dir
    (expand-file-name
     (file-name-as-directory "~/Projetos/ildenir.github.com"))
    "Diretorio do projeto do website."
    :type 'directory
    :group 'ilm-website)

  (defcustom website-hugo-dir
    (expand-file-name
     (file-name-as-directory "~/Projetos/ilm-hugo"))
    "Diretorio de publicacao do site."
    :type 'directory
    :group 'ilm-website)

  (defsubst publish-content-dir ()
    "Diretorio onde sera publicado o website."
    (expand-file-name "content" website-hugo-dir))

  (defsubst publish-images-dir ()
    "Diretorio onde sera publicado as imagens do website."
    (expand-file-name "images"
                      (concat (file-name-as-directory website-hugo-dir)
                              "static")))

  (defsubst src-dir ()
    "Diretorio dos arquivos fonte org, imagens, css e ..."
    website-project-dir)

  (defsubst src-articles-dir ()
    "Diretorio fonte dos artigos."
    (concat (file-name-as-directory (src-dir))
            (file-name-as-directory "articles")))


  (defsubst src-images-dir ()
    "Diretorio fonte dos artigos."
    (concat (file-name-as-directory (src-dir))
            (file-name-as-directory "images")))

  (require 'org-element)
  (require 'cl-lib)

  (defun website--extrack-kv (ast)
    "Rotina interna para extrair (key value) da AST."
    (org-element-map ast 'keyword
      (lambda(key) (list
                    (org-element-property :key key)
                    (org-element-property :value key)) )))

  (defun website--extract-link (ast)
    "Rotina interna para extrair link para image da AST."
    (org-element-map ast 'link
      (lambda(lk) (when (string= (org-element-property :type lk) "fuzzy")
                    lk))))

  (defun website-filter-kv (kws filterregexp)
    "Filtra lista KWS com key match padrao FILTERREGEXP."
    (cl-remove-if-not (lambda (el) (string-match filterregexp (car el))) kws))

  (defun website-extract-article-data (filename)
    "Extrai dados do artigo com nome FILENAME.
  Retorna plist keys title image description date"
    (with-temp-buffer
      (insert-file-contents filename)
      (org-mode)
      (let* ((filterregex "\\(TITLE\\|DATE\\|DESCRIPTION\\|EMAIL\\|KEYWORDS\\|AUTHOR\\|LANGUAGE\\)")
             (ast (org-element-parse-buffer))
             (kv (website--extrack-kv ast))
             (link (website--extract-link ast))
             (kv-filtered (website-filter-kv kv filterregex))
             kv-plist)
        (setq kv-plist
              (plist-put kv-plist
                         'image (org-element-interpret-data (car link))))
        (dolist (k kv-filtered kv-plist)
          (setq kv-plist
                (plist-put kv-plist
                           (intern (downcase (car k))) (car (cdr k))))))))

  (defun website-generate-article ()
    "Gera lista com dados de artigos do projeto.
  A lista retornada possui o formato
  '(filename (title desc link-img pub-date)) onde link-img pode ser nil caso nao
  exista.  Description vai ser extraida de #+DESCRIPTION:"
    (let ((files (directory-files-recursively (src-dir) "\.org$")))
      (mapcar (lambda (fn) (list fn (website-extract-article-data fn)))
              files)))
  (defun ilm-convert-tags (keywords)
    "Converte KEYWORDS para format ['key1', 'key2']."
  (let ((keywords-seq (read keywords)))
    (concat "[" (string-join (mapcar #'prin1-to-string keywords-seq) ",") "]")))

  (defun ilm-website-to-hugo  (plist filename pub-dir)
    (let* ((fname (file-name-base filename))
           (xfilename (expand-file-name (concat fname ".org") pub-dir))
           (metadatas (website-extract-article-data filename))
           title
           date
           author
           draft
           lang
           keywords)
      (with-temp-buffer
        (org-mode)
        (insert-file-contents filename)
        (setq title (plist-get metadatas 'title))
        (setq date (let ((parsed-time (parse-time-tokenize (plist-get metadatas 'date))))
                     (format "%d-%.2d-%.2d" (cl-third parsed-time)
                             (cl-second parsed-time)
                             (cl-first parsed-time))))
        (setq author (plist-get metadatas 'author))
        (setq keywords (plist-get metadatas 'keywords))
        (message (prin1-to-string keywords))
        (setq draft (if (and keywords  (string-match "\\.*draft\\.*" keywords))
                        "true" "false"))
        (setq lang (plist-get metadatas 'language))
        (org-org-export-as-org))
      (with-temp-file xfilename
        ;;	  (fundamental-mode)
        (erase-buffer)
        (insert-buffer (get-buffer "*Org ORG Export*"))
        (goto-char 0)
        (mark-paragraph)
        (delete-region (region-beginning) (region-end))
        (insert (format "---\ntitle: \"%s\"\nauthor: \"%s\"\ndate: %s\ndraft: %s\ntags: %s\n---\n" title author date draft (ilm-convert-tags keywords)))
        (message (ilm-convert-tags keywords))
        (org-mode))))
  (require 'ox-publish)
  (setq org-publish-project-alist
        `(
          ("org-notes-to-hugo"
           :base-directory ,(src-articles-dir)
           :base-extension "org"
           :publishing-directory ,(publish-content-dir)
           :recursive t
           :publishing-function ilm-website-to-hugo)
          ("org-static-hugo"
           :base-directory ,(src-images-dir)
           :base-extension "png\\|jpg\\|gif\\|svg"
           :publishing-directory ,(publish-images-dir)
           :recursive t
           :publishing-function org-publish-attachment
           )
          ("org-hugo" :components ("org-notes-to-hugo" "org-static-hugo"))))

  (defun website--extract-kw (kw)
    "Auxiliar cria funcao que extrai lista de KW de todos os artigos."
    (lambda (data)
      (let ((pl (car (cdr data))) )
        (plist-get pl kw))))


  (defun website--list-all (keyword)
    "Extrai lista de keyword de todos os arquivos"
    (let ((articles (website-generate-article)))
      (remove nil (delete-dups (mapcar (website--extract-kw keyword) articles)))))

  (defun website--keyword-list ()
    "Lista de todas opcoes KEYWORD dos artigos."
    (let ((articles-kw (website--list-all 'keywords))
          (split-string-default-separators "[ \f\t\n\r\v,]+")
          (kw-list (list)))
      (dolist (l articles-kw kw-list)
        (setq kw-list (append kw-list (split-string l))))
      (remove "nil" (delete-dups kw-list))))

  (defun website-new-article ()
    "Entrevista usuario e insera conteudo ao projeto"
    (interactive)
    (let* ((title (read-string "Title: " ))
           (description (read-string "Descricao: "))
           (author (completing-read "Autor: " (website--list-all 'author)))
           (date (format-time-string "%d/%m/%Y"))
           (email (completing-read "Email: " (website--list-all 'email)))
           (keywords (completing-read-multiple "Palavras-chave: "
                                               (website--keyword-list)))
           (filename (string-join
                      (list (concat (file-name-as-directory (src-dir))
                                    (file-name-as-directory "articles"))
                            (format-time-string "%Y%m%d") "-"
                            (string-join (split-string title) "_") ".org"))))
      (with-current-buffer (get-buffer-create filename)
        (insert (format "#+TITLE: %s\n" title))
        (insert (format "#+DATE: %s\n" date))
        (insert (format "#+AUTHOR: %s\n" author))
        (insert (format "#+EMAIL: %s\n" email))
        (insert (format "#+DESCRIPTION: %s\n" description))
        (insert (format "#+KEYWORDS: %s\n" keywords))
        (insert "#+LANGUAGE: pt_BR\n")
        (insert "#+OPTIONS: num:nil\n")
        (write-file filename))))

  (provide 'website-publish)
  ;;; website-publish.el ends here
#+end_src

* Referencia

- [[https://gohugo.io/documentation/][Go Hugo Documentation]]
- [[https://stackoverflow.com/questions/12641469/list-submodules-in-a-git-repository]]
